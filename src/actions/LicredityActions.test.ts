import { expect, test } from "bun:test";
import { LicredityActionsBuilder } from "./LicredityActions";
import { parseEther, parseUnits, zeroAddress } from "viem";
import { ActionConstants } from "./BaseActions";

const MOCK_ADDRESS = "0x3Ebad585Af7A40f2ab97ceeB819f273Cbb3f71fB";

test("DepositFungible", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [
        true,
        "0x99b2870fC56322F1cda2483B322282Ce4f9EF592",
        parseEther("0.1"),
      ],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0xb2870fc56322f1cda2483b322282ce4f9ef592000000000000000000000000000000000000000000000000016345785d8a0000",
  );
});

test("DepositFungible all", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [false, zeroAddress, ActionConstants.OPEN_DELTA],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x
  );
});

test("DepositNonFungible", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositNonFungible",
      args: [true, MOCK_ADDRESS, 1n],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0xebad585af7a40f2ab97ceeb819f273cbb3f71fb0000000000000000000000000000000000000000000000000000000000000001",
  );
});

test("Withdraw Fungible", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [true, MOCK_ADDRESS, parseEther("50")],
    },
    {
      name: "withdrawFungible",
      args: [ActionConstants.MSG_SENDER, MOCK_ADDRESS, parseEther("20")],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb000000000000000000000000000000000000000000000002b5e3af16b1880000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb000000000000000000000000000000000000000000000001158e460913d00000",
  );
});

test("Withdraw Fungible From Manager", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [true, MOCK_ADDRESS, parseEther("50")],
    },
    {
      name: "withdrawFungible",
      args: [ActionConstants.ADDRESS_THIS, MOCK_ADDRESS, parseEther("20")],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb000000000000000000000000000000000000000000000002b5e3af16b1880000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb000000000000000000000000000000000000000000000001158e460913d00000",
  );
});

test("Withdraw NonFungible", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositNonFungible",
      args: [false, MOCK_ADDRESS, 1n],
    },
    {
      name: "withdrawNonFungible",
      args: ["0x000000000000000000000000000000000000c0DE", MOCK_ADDRESS, 1n],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000201030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000c0de0000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb0000000000000000000000000000000000000000000000000000000000000001",
  );
});

test("Increase Debt Amount", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [true, zeroAddress, parseEther("100")],
    },
    {
      name: "increaseDebtAmount",
      args: [ActionConstants.MSG_SENDER, parseEther("5")],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000004563918244f40000",
  );
});

test("Increase Debt Shares", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [true, zeroAddress, parseEther("100")],
    },
    {
      name: "increaseDebtShare",
      args: [ActionConstants.MSG_SENDER, parseUnits("5", 24)],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000422ca8b0a00a425000000",
  );
});

test("Decrease Debt Shares", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "depositFungible",
      args: [true, zeroAddress, parseEther("100")],
    },
    {
      name: "increaseDebtShare",
      args: [ActionConstants.ADDRESS_THIS, parseUnits("5", 24)],
    },
    {
      name: "decreaseDebtShare",
      args: [false, parseUnits("5", 24), false],
    },
    {
      name: "withdrawFungible",
      args: [ActionConstants.MSG_SENDER, zeroAddress, parseEther("100")],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0xe00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d63100000",
  );
});

test("Decrease Debt Amount", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "increaseDebtAmount",
      args: [MOCK_ADDRESS, parseEther("5")],
    },
    {
      name: "decreaseDebtAmount",
      args: [false, parseEther("5"), true],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000204060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb0000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000001",
  );
});

test("Exchange", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "exchange",
      args: [false, ActionConstants.MSG_SENDER, parseEther("1")],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0xde0b6b3a7640000",
  );
});

test("DynCall", () => {
  const actions = LicredityActionsBuilder.fromArray([
    {
      name: "dynCall",
      args: [MOCK_ADDRESS, 0n, "0xc0de"],
    },
  ])
    .encode()
    .toCalldata();

  expect(actions).toBe(
    "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000003ebad585af7a40f2ab97ceeb819f273cbb3f71fb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002c0de000000000000000000000000000000000000000000000000000000000000",
  );
});
